use std::str::FromStr;
use std::char;
use std::path::{Path, MAIN_SEPARATOR};
use std::fs::File;
use std::io::prelude::*;

use sourcepaths::SourcePaths;

use ast::VariableMethod;
use ast::BinaryOpcode;
use ast::UnaryOpcode;
use ast::Type;
use ast::Node;
use ast::Item;

#![arguments(_import_paths: &mut SourcePaths)]

import_path -> &'input str
    = #quiet<$([:a-zA-Z0-9_]+)> / #expected("import path")

import -> Item
    = "import" _ s:import_path _ ";" {
        let path = Path::new(&s.replace("::", &MAIN_SEPARATOR.to_string())).with_extension("rvs");
        match _import_paths.find(&path) {
            Err(e) => {
                Item::ImportError(path.to_path_buf(), e)
            }
            Ok(path) => {
                if _import_paths.enter_import(&path) {
                    match File::open(&path) {
                        Err(e) => {
                            Item::ImportError(path.to_path_buf(), e)
                        }
                        Ok(mut file) => {
                            let mut contents = String::new();
                            match file.read_to_string(&mut contents) {
                                Err(e) => {
                                    Item::ImportError(path.to_path_buf(), e)
                                }
                                Ok(_) => {
                                    let result = Item::Multiple(items(&contents, _import_paths).unwrap());
                                    _import_paths.leave_import();

                                    result
                                }
                            }
                        }
                    }
                } else {
                    Item::Multiple(Vec::new())
                }
            }
        }
    }

variable_name -> &'input str
    = #quiet<$([a-z_] [a-zA-Z0-9_:]*)> / #expected("variable name")

type_name -> &'input str
    = #quiet<$([A-Z] [a-zA-Z0-9]*)> / #expected("type name")

dec_digit = [0-9]
dec_number -> u32
    = s:$(dec_digit (dec_digit / "_")*) {
        let stripped = &str::replace(s, "_", "");
        u32::from_str(stripped).unwrap()
    }

hex_digit = [0-9a-fA-F]
hex_number -> u32
    = "0" [xX] s:$((hex_digit / "_")+) {
        let stripped = &str::replace(s, "_", "");
        u32::from_str_radix(stripped, 16).unwrap()
    }

number -> Box<Node>
    = u:hex_number { Box::new(Node::Number(u)) }
    / u:dec_number { Box::new(Node::Number(u)) }

atom -> Box<Node>
    = "(" _ v:expr _ ")" { v }
    / #quiet<unary_expr> / #expected("unary operator")
    / #quiet<number> / #expected("number")
    / #quiet<typ> / #expected("type")
    / #quiet<enum_item_inst> / #expected("enum item")
    / #quiet<variable_inst> / #expected("variable")

variable_inst -> Box<Node>
    = a:variable_name b:variable_method_call? {
        let method = if let Some(method) = b {
            method
        } else {
            VariableMethod::Next
        };

        Box::new(Node::VariableInst(a.to_owned(), method))
    }

variable_method_call -> VariableMethod
    = "." a:variable_method { a }

variable_method -> VariableMethod
    = "prev" { VariableMethod::Prev }
    / "copy" { VariableMethod::Copy }

typ -> Box<Node>
    = pattern
    / range
    / sample
    / unique
    / weighted
    / sequence
    / done
    / once

expr -> Box<Node>
    = binary_expr

unary_expr -> Box<Node>
    = "~" _ a:atom { Box::new(Node::UnaryOperation(UnaryOpcode::Inv, a)) }
    / "-" _ a:atom { Box::new(Node::UnaryOperation(UnaryOpcode::Neg, a)) }

op_or  = _ "|" _
op_xor = _ "^" _
op_and = _ "&" _
op_shl = _ "<<" _
op_shr = _ ">>" _
op_add = _ "+" _
op_sub = _ "-" _
op_mul = _ "*" _
op_div = _ "/" _
op_mod = _ "%" _

binary_expr -> Box<Node>
    = #infix<atom> {
        #L  x op_or  y { Box::new(Node::BinaryOperation(x, BinaryOpcode::Or, y)) }
        #L  x op_xor y { Box::new(Node::BinaryOperation(x, BinaryOpcode::Xor, y)) }
        #L  x op_and y { Box::new(Node::BinaryOperation(x, BinaryOpcode::And, y)) }
        #L  x op_shl y { Box::new(Node::BinaryOperation(x, BinaryOpcode::Shl, y)) }
            x op_shr y { Box::new(Node::BinaryOperation(x, BinaryOpcode::Shr, y)) }
        #L  x op_add y { Box::new(Node::BinaryOperation(x, BinaryOpcode::Add, y)) }
            x op_sub y { Box::new(Node::BinaryOperation(x, BinaryOpcode::Sub, y)) }
        #L  x op_mul y { Box::new(Node::BinaryOperation(x, BinaryOpcode::Mul, y)) }
            x op_div y { Box::new(Node::BinaryOperation(x, BinaryOpcode::Div, y)) }
            x op_mod y { Box::new(Node::BinaryOperation(x, BinaryOpcode::Mod, y)) }
    }

item -> Item
    = enum
    / variable
    / import

variable -> Item
    = lhs:variable_name _ "=" _ rhs:expr _ ";" {
        Item::Single(
            Box::new(Node::Variable(
                lhs.into(),
                rhs
            ))
        )
    }

pub items -> Vec<Item>
    = _ a:item ** _ _ { a }

optional_trailing_comma
    = (_ "," _)?

enum -> Item
    = "enum" _ id:type_name _ "{" _ enum_items:enum_item ** ("," _) optional_trailing_comma _ "}" {
        Item::Single(
            Box::new(Node::Enum(id.into(), enum_items))
        )
    }

enum_assignment -> Box<Node>
    = "=" _ a:number _ {
        a
    }

enum_item -> Box<Node>
    = a:type_name _ b:enum_assignment? {
        Box::new(
            Node::EnumItem(a.into(), b)
        )
    }

enum_item_inst -> Box<Node>
    = a:type_name "::" b:type_name {
        Box::new(
            Node::EnumItemInst(a.into(), b.into())
        )
    }

enum_inst -> Box<Node>
    = a:type_name {
        Box::new(
            Node::EnumInst(a.into())
        )
    }

pattern -> Box<Node>
    = "Pattern(" _ a:expr ++ ("," _) optional_trailing_comma _ ")" {
        Box::new(
            Node::Type(
                Type::Pattern,
                a
            )
        )
    }

sequence -> Box<Node>
    = "Sequence(" _ a:expr **<1, 3> ("," _) optional_trailing_comma _ ")" {
        Box::new(Node::Type(Type::Sequence, a))
    }

expand -> Box<Node>
    = "Expand(" _ a:expr **<1, 2> ("," _) optional_trailing_comma _ ")"{
        Box::new(Node::Type(Type::Expand, a))
    }

range -> Box<Node>
    = "[" _ a:expr **<2> ("," _) optional_trailing_comma _ "]" {
        Box::new(
            Node::Type(
                Type::Range,
                a
            )
        )
    }

sample -> Box<Node>
    = "Sample(" _ a:(expand / expr / enum_inst) ++ ("," _) optional_trailing_comma _ ")" {
        Box::new(
            Node::Type(
                Type::Sample,
                a
            )
        )
    }

unique -> Box<Node>
    = "Unique(" _ a:(expand / expr / enum_inst) ++ ("," _) optional_trailing_comma _ ")" {
        Box::new(Node::Type(Type::Unique, a))
    }

weighted_pair -> Box<Node>
    = a:dec_number _ ":" _ b:expr {
        Box::new(
            Node::WeightedPair(a, b)
        )
    }

weighted -> Box<Node>
    = "{" _ a:weighted_pair ++ ("," _) optional_trailing_comma _ "}" {
        Box::new(Node::Type(Type::Weighted, a))
    }

done -> Box<Node>
    = "Done(" _ a:expr _ ")" {
        Box::new(Node::Type(Type::Done, vec![a]))
    }

once -> Box<Node>
    = "Once(" _ a:expr _ ")" {
        Box::new(Node::Type(Type::Once, vec![a]))
    }

// From: https://github.com/kevinmehall/rust-peg/blob/cc6a3cdebfafc670a9dffb0422709ff6d85d1207/src/grammar.rustpeg
_ = #quiet<(whitespace / eol / comment)*>

comment = singleLineComment

singleLineComment
    = "//" (!eolChar .)*

// Modeled after ECMA-262, 5th ed., 7.3.
eol
    = "\n"
    / "\r\n"
    / "\r"
    / "\u{2028}"
    / "\u{2029}"

eolChar
  = [\n\r\u{2028}\u{2029}]

// Modeled after ECMA-262, 5th ed., 7.2.
whitespace
    = [ \t\u{00A0}\u{FEFF}\u{1680}\u{180E}\u{2000}-\u{200A}\u{202F}\u{205F}\u{3000}] // \v\f removed

string -> String
    = string:(doubleQuotedString / singleQuotedString) { string }

doubleQuotedString -> String
    = '"' s:doubleQuotedCharacter* '"' { s.into_iter().collect() }

doubleQuotedCharacter -> char
    = simpleDoubleQuotedCharacter
    / simpleEscapeSequence
    / zeroEscapeSequence
    / hex2EscapeSequence
    / unicodeEscapeSequence
    / eolEscapeSequence

simpleDoubleQuotedCharacter -> char
    = !('"' / "\\" / eolChar) c:$. { c.chars().next().unwrap() }

singleQuotedString -> String
    = "'" s:singleQuotedCharacter* "'" { s.into_iter().collect() }

singleQuotedCharacter -> char
    = simpleSingleQuotedCharacter
    / simpleEscapeSequence
    / zeroEscapeSequence
    / hex2EscapeSequence
    / unicodeEscapeSequence
    / eolEscapeSequence

simpleSingleQuotedCharacter -> char
    = !("'" / "\\" / eolChar) c:$. { c.chars().next().unwrap() }

simpleEscapeSequence -> char
    = "\\" !(digit / "x" / "u" / eolChar) c:$(.) {
        match c.chars().next().unwrap() {
            //'b' => '\b',
            //'f' => '\f',
            'n' => '\n',
            'r' => '\r',
            't' => '\t',
            //'v' => '\v',
            x  => x
        }
    }

zeroEscapeSequence -> char
    = "\\0" !digit { 0u8 as char }

hex2EscapeSequence -> char
    = "\\x" value:$(hexDigit hexDigit) {
        char::from_u32(u32::from_str_radix(value, 16).unwrap()).unwrap()
    }

unicodeEscapeSequence -> char
    = "\\u{" value:$(hexDigit+) "}" {
        char::from_u32(u32::from_str_radix(value, 16).unwrap()).unwrap()
    }

eolEscapeSequence -> char
    = "\\" eol { '\n' }

digit
    = [0-9]

hexDigit
    = [0-9a-fA-F]

// vim: ft=rust

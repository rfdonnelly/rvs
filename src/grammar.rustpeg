use std::str::FromStr;

use ast::Opcode;
use ast::Node;

pub identifier -> &'input str
    = $([a-zA-Z_] [a-zA-Z0-9_:]*)

pub number -> u32
    = s:$([0-9] [0-9_]*) {
        let stripped = &str::replace(s, "_", "");
        u32::from_str(stripped).unwrap()
    }

pub hex_number -> u32
    = "0" [xX] s:$([0-9a-fA-F_]+) {
        let stripped = &str::replace(s, "_", "");
        u32::from_str_radix(stripped, 16).unwrap()
    }

pub atom -> Box<Node>
    = "(" v:infix_arith ")" { v }
    / u:hex_number { Box::new(Node::Number(u)) }
    / u:number { Box::new(Node::Number(u)) }

pub infix_arith -> Box<Node>
    = #infix<atom> {
        #L  x "+" y { Box::new(Node::Operation(x, Opcode::Add, y)) }
            x "-" y { Box::new(Node::Operation(x, Opcode::Subtract, y)) }
        #L  x "*" y { Box::new(Node::Operation(x, Opcode::Multiply, y)) }
            x "/" y { Box::new(Node::Operation(x, Opcode::Divide, y)) }
    }

